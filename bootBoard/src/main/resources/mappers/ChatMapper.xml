<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Chat">

	<resultMap id="chatRoomResultMap" type="chat">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="limit" column="limit"/>
        <result property="host" column="host"/>
        <result property="createdAt" column="created_at"/>
        <collection property="members" ofType="member" select="findMembersByChatRoomId" column="id"/>
    </resultMap>

	<resultMap id="memberResultMap" type="member">
	    <result property="memberId" column="member_id"/>
	    <result property="name" column="name"/>
	    <result property="nickname" column="nickname"/>
	    <result property="role" column="role"/>
	    <result property="userId" column="user_id"/>
	    <result property="username" column="username"/>
	</resultMap>

	<!-- 채팅방 접속자 목록 조회 -->
    <select id="findMembersByChatRoomId" parameterType="long" resultType="member">
        SELECT DISTINCT
            m.member_id AS memberId, 
            m.name, 
            m.nickname, 
            m.password, 
            m.role, 
            m.is_connected 
        FROM 
            member m
        JOIN 
            chat_messages cm ON m.member_id = cm.recipient
        WHERE 
            cm.chat_room_id = #{chatRoomId}
    </select>

	<!-- 채팅방 생성 -->
	<insert id="chatCreate" parameterType="ChatRoomDTO" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            SELECT chat_room_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO chat_room (id, name, password, limit, host)
        VALUES (#{id}, #{name}, #{password}, #{limit}, #{host})
    </insert>

	<!-- 채팅방 목록 조회 -->
    <select id="chatList" resultType="chat">
        SELECT * FROM chat_room
    </select>

	<!-- 채팅방 상세 조회 -->
    <select id="chatRoom" parameterType="long" resultType="chat">
        SELECT cr.id, cr.name, cr.password, cr.limit, cr.host, cr.created_at,
               CASE WHEN cr.host = m.name THEN 1 ELSE 0 END AS isHost
        FROM chat_room cr
        	JOIN member m 
        	ON cr.host = m.member_id
        WHERE cr.id = #{id}
    </select>
    
    <!-- 채팅메시지 전송 -->
    <insert id="sendMessage" parameterType="map">
        INSERT INTO chat_messages (id, chat_room_id, message, sender, created_at)
        VALUES (chat_message_seq.NEXTVAL, #{chatRoomId}, #{message}, #{sender}, CURRENT_TIMESTAMP)
    </insert>

	<!-- 귓속말 -->
    <insert id="sendWhisper" parameterType="map">
        INSERT INTO chat_messages (chat_room_id, sender, recipient, message, created_at)
        VALUES (#{chatRoomId}, #{sender}, #{recipient}, #{message}, SYSDATE)
    </insert>

	<!-- 채팅방 상세 조회 시 유저 정보 저장 -->
	<insert id="addUserToChatRoom" parameterType="map">
        INSERT INTO chat_user (user_id, username)
        VALUES (#{userId}, #{username})
    </insert>

	<!-- 채팅메시지 수신 조회 -->
    <select id="findMessagesByChatRoomId" resultType="chat">
        SELECT id, chat_room_id, recipient, message, sender, created_at
        FROM chat_messages
        WHERE chat_room_id = #{chatRoomId}
        ORDER BY created_at ASC
    </select>
    
    <!-- 채팅방 입장 시 접속자 수 증가 -->
	<update id="incrementConnectedUsers" parameterType="long">
	    UPDATE chat_room
	    SET connected_users = connected_users + 1
	    WHERE id = #{chatRoomId}
	</update>
	
	<!-- 채팅방 입장 시 접속자 수 줄어듬 -->
	<update id="decrementConnectedUsers" parameterType="long">
	    UPDATE chat_room
	    SET connected_users = connected_users - 1
	    WHERE id = #{chatRoomId}
	</update>
	
	<!-- 채팅방 입장 시 유저정보 인서트 -->
	<insert id="addUserToRoom" parameterType="map">
        INSERT INTO chat_user (chat_room_id, user_id) 
        VALUES (#{chatRoomId}, #{userId})
    </insert>
    
    <!-- 채팅방 나가기 시 유저정보 삭제 -->
    <delete id="removeUserFromRoom">
        DELETE FROM chat_user 
        WHERE chat_room_id = #{chatRoomId}
        AND user_id = #{userId}
    </delete>
	
	<!-- 채팅방 접속자수 가져오기 -->
	<select id="getConnectedUsers" resultType="int" parameterType="long">
	    SELECT connected_users
	    FROM chat_room
	    WHERE id = #{chatRoomId}
	</select>
	
	<!-- 접속자 최대인원 가져오기 -->
	<select id="getUserLimit" resultType="int" parameterType="long">
	    SELECT limit
	    FROM chat_room
	    WHERE id = #{chatRoomId}
	</select>

	<!-- 접속자 목록 관리 -->
	<select id="getUsersInRoom" resultMap="memberResultMap">
	    SELECT 
	        m.member_id, 
	        m.name, 
	        m.nickname, 
	        m.role,
	        cu.user_id,
	        cu.username
	    FROM 
	        member m
	        JOIN chat_room cr ON cr.id = #{chatRoomId}
	        JOIN chat_user cu ON cu.user_id = m.member_id
	    WHERE 
	        m.is_connected = 1
	</select>

	<!-- 접속자 관리 -->
    <update id="updateConnectionStatus" parameterType="map">
        UPDATE member
        SET is_connected = #{isConnected}
        WHERE member_id = #{memberId}
    </update>
    
    <!-- 채팅방 정보 변경 -->
     <update id="updateChatRoom" parameterType="chat">
        UPDATE chat_room
        SET name = #{name},
            password = #{password},
            limit = #{limit},
            host = #{host},
            created_at = #{createdAt}
        WHERE id = #{id}
    </update>
    
    <!-- 강퇴 -->
    <delete id="kickUser" parameterType="map">
        DELETE FROM chat_user
        WHERE chat_room_id = #{chatRoomId} 
        AND user_id = #{userId}
    </delete>
    
    <!-- 사용자가 채팅방에 있는지 확인 -->
    <select id="checkUserExists" parameterType="map" resultType="int">
        SELECT COUNT(*) 
        FROM chat_user
        WHERE chat_room_id = #{chatRoomId} 
        AND user_id = #{userId}
    </select>
    
    <!-- 채팅방 유저 정보 가져오는 메서드 -->
    <select id="getChatUser" resultType="chatuser">
    	SELECT user_id, username
    	FROM chat_user
    </select>
    
    <!-- 이전 채팅방 정보 검색 메서드 -->
    <select id="searchByMessageSender" parameterType="map" resultType="chat">
        SELECT id, chat_room_id, recipient, message, TO_CHAR(created_at, 'YYYY-MM-DD HH24:MI:SS') AS createdAt, sender
        FROM (
            SELECT a.*, ROWNUM rnum
            FROM (
                SELECT id, chat_room_id, recipient, message, created_at, sender
                FROM chat_messages
                WHERE ${searchType} LIKE '%' || #{keyword} || '%'
                ORDER BY id DESC
            ) a
            WHERE ROWNUM &lt;= #{offset} + #{limit}
        )
        WHERE rnum > #{offset}
    </select>
    
    <!-- 이전 채팅방 정보 조회 메서드 -->
    <select id="chatMessageList" parameterType="map" resultType="chat">
        SELECT id, chat_room_id, recipient, message, TO_CHAR(created_at, 'YYYY-MM-DD HH24:MI:SS') AS createdAt, sender
        FROM (
            SELECT a.*, ROWNUM rnum
            FROM (
                SELECT id, chat_room_id, recipient, message, created_at, sender
                FROM chat_messages
                ORDER BY id DESC
            ) a
            WHERE ROWNUM &lt;= #{offset} + #{limit}
        )
        WHERE rnum &gt; #{offset}
    </select>

	<!-- 접속자 수 0으로 설정 -->
	<update id="setConnectedUsersZero" parameterType="long">
		UPDATE chat_room
		SET connected_users = 0
		WHERE id = #{chatRoomId}
	</update>

	<!-- 채팅방 삭제 -->
	<delete id="deleteChatRoom" parameterType="long">
		DELETE FROM chat_room
		WHERE id = #{chatRoomId}
	</delete>

	<!-- 채팅방 방장 가져오기 -->
	<select id="getChatRoomHost" resultType="string"
		parameterType="long">
		SELECT host
		FROM chat_room
		WHERE id = #{chatRoomId}
	</select>
    
</mapper>